// READ THESE!
  // FLICKR API OVERVIEW: https://www.flickr.com/services/api/misc.overview.html
  // FLICKR.PHOTOS.SEARCH OVERVIEW: https://www.flickr.com/services/api/flickr.photos.search.html
  // FLICKR JSON RESPONSE TYPE: https://www.flickr.com/services/api/response.json.html
  // HOW TO DISPLAY AN IMAGE USING FLICKR: https://www.flickr.com/services/api/misc.urls.html
  // AN EXAMPLE OF THE DATA THAT WILL BE RETURNED: https://api.flickr.com/services/rest?method=flickr.photos.search&api_key=2f5ac274ecfac5a455f38745704ad084&text=Satantango&format=json&nojsoncallback=true

// Broad overview...
  // We need functions to:
    // Make an AJAX request to Flickr
    // Iterate through a large amount of photos
    // Create a URL based on a format provided by Flickr
    // Display a single photo
    // Handle user inputs

// Set up your important variables here. Typically this includes:
  // Base URLs
  // API Keys
  // Important elements
  // Timers
  // Variables that you want to be global

var baseFlickrURL = "https://api.flickr.com/services/rest";
// var API_KEY = "2f5ac274ecfac5a455f38745704ad084"; Either API key will work
var API_KEY = "3ab66c44737420e50ceaee170f6eb074"; // Either API key will work

var generateImageURL = function ( data ) {
  // A photo (stored in the data variable) contains the following information
    // Unfortunately they don't provide a URL so we have to create it!
  // This function is meant to create the URL for just one provided photo
  // We got the URL structure from here: https://www.flickr.com/services/api/misc.urls.html
    // Typically anything in curly brackets on that URL is going to be stuff that is considered dynamic (farm, server, id, secret etc.)
      // We need to fill in those dynamic values

  // {
  //   id: "29223124160",
  //   owner: "85659491@N00",
  //   secret: "eb22276943",
  //   server: "8367",
  //   farm: 9,
  //   title: "#vintagesigns #SpikeIt #badgers #drugs",
  //   ispublic: 1,
  //   isfriend: 0,
  //   isfamily: 0
  // }

  // Construct the URL using string concatenation (and syntactic sugar)
  var url = "https://farm";
  url += data.farm;
  url += ".staticflickr.com/";
  url += data.server;
  url += "/";
  url += data.id;
  url += "_";
  url += data.secret;
  url += "_q.jpg";

  // Return the URL so that we use it in other functions etc.
  return url;
};

var displayPhoto = function ( url ) {
  // Receives a URL (generated by the generateImageURL function)
  // Creates a new img element using the URL
  // Puts the new img (with the correct src attribute) at the end of the page
  var $img = $("<img>");
  $img.attr("src", url);
  $("body").append( $img );
};

var handleSearchData = function ( data ) {
  // The data that comes back from the AJAX request (and is provided by the $.ajax done handler) looks like this: https://api.flickr.com/services/rest?method=flickr.photos.search&api_key=2f5ac274ecfac5a455f38745704ad084&text=Satantango&format=json&nojsoncallback=true

  // We want to loop through each one of the photos that is returned, but unfortunately that is nested within a number of keys in the data object

  // Find the photos that we care about by going through a couple of keys in the data object
  var arrOfPhotos = data.photos.photo;

  // Iterate through each one of the elements
  for ( var i = 0; i < arrOfPhotos.length; i += 1 ) {
    // For every photo, create an image URL using our helper function
    var currentPhoto = arrOfPhotos[i];
    var imageURL = generateImageURL( currentPhoto );
    // Then put the new photo on the actual page
    displayPhoto( imageURL );
  }
};

var searchFlickr = function ( term ) {
  // Make an AJAX request to the Flickr API asking for the information that we care up. When figuring out this request, the things that you need to think about are:
    // The URL
    // The HTTP verb (GET, POST, PUT, PATCH, DELETE)
    // Any parameters that the API requires or you want to provide
      // For this API, we found out which parameters where necessary on these two pages:
        // https://www.flickr.com/services/api/misc.overview.html
        // https://www.flickr.com/services/api/flickr.photos.search.html

  $.ajax({
    url: baseFlickrURL,
    type: "GET",
    data: {
      method: "flickr.photos.search",
      api_key: API_KEY,
      text: term,
      format: "json",
      nojsoncallback: true,
      // page: 1,             // This will help with pagination
      // per_page: 200        // This might help with pagination
    }
  }).done( handleSearchData ); // Once this AJAX request has been successfully completed, send all of the data (after it has been parsed by JSON), to the handleSearchData function so that we can display it

};


// Wait until every element has finished loading on the page
  // So that we can attach event handlers etc.
$(document).ready(function () {

  // When the form is submitted, call the following anonymous callback function receiving the event parameter (and calling it e) so that we know details about the event that took place
  $("form").on("submit", function (e) {

    // When a form is submitted, the browser will, by default, reload the page or redirect you to somewhere else
      // We don't want that to happen, so prevent the default browser behaviour
    e.preventDefault();

    // Check to see what the user has typed in the element with the ID of searchFlickr. .val() accesses what is typed in inputs
    var searchQuery = $("#searchFlickr").val();

    // If nothing was typed in (if the value was an empty string)
    if ( searchQuery.length === 0 ) {

      // Show the fact that there was an error to the user
      $("#searchFlickr").css({
        border: "1px solid red"
      });

      // Leave this function (don't execute any more lines - return will always be the last line that runs)
      return false;
    }

    // If there was a searchQuery (if someone had actually typed something), call the searchFlickr function that we defined earlier to make the AJAX request
    searchFlickr( searchQuery );
  });

});



//////////////
// HOMEWORK //
//////////////

// Keep working on the Flickr App
// Add a next page button
  // Adding query parameters of page and maybe per_page
// Add some validations to the page
  // Show an error if there are no photos to display
  // Only show photos related to the search term
// Infinite scroll
  // Show more photos when someone is 50px away from the bottom of the page
  // $(window).height(); - browser window height
  // $(document).height(); - entire page height
  // $(window).scrollTop(); - how far has the user scrolled down
// Lightbox or slider - feel free to use a library there
// Throttling and/or debouncing
  // http://underscorejs.org/#throttle
